beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
beta_l = beta
Fisher <- fisher(beta, X, n)
FisherInv <- solve(Fisher)
print(any(is.na(FisherInv)))
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
diag(1, nrow(X), ncol(X))
runif(1, 0, 1)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
print(Fisher)
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
print(iter_max)
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
print(Fisher)
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
print(iter_max)
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
print(Fisher)
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next()
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
print(iter_max)
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
print(Fisher)
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
myglm <- function(formula, data){
X <- model.matrix(formula, data)
y <- data["y"]
y <- as.matrix(y)
n <- data["n"]
n <- as.matrix(n)
tol <- 1e-3
iter_max <- 100
beta <- replicate(ncol(X),1)
beta_l <- replicate(ncol(X), -100)
preturb = F
while (iter_max > 0 & ((beta_l - beta) %*% (beta_l - beta))[1]**0.5 > tol){
print(iter_max)
beta_l = beta
Fisher <- fisher(beta, X, n)
if(preturb){
print("preturb")
Fisher = Fisher + diag(runif(1, 0, 1), nrow(Fisher), ncol(Fisher))
print(Fisher)
preturb <- F
}
FisherInv <- solve(Fisher)
if((any(is.na(FisherInv)))){
print("next")
preturb = T
next
}
beta = beta + FisherInv %*% score(X, y, n, beta)
beta <- as.vector(beta)
print(solve(fisher(beta, X, n)))
iter_max <- iter_max - 1
}
return(beta)
}
myglm(formula= ~ldose, data=beetle)
setwd("~/toast/Time-Series")
# Chunk 1: setup
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE,
include = FALSE,
results = "hold"
)
knitr::opts_chunk$set(error=TRUE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(results="hold")
# Chunk 2
#Imports
library("knitr") #probably already installed
library("rmarkdown") #probably already installed
library(astsa)
# Chunk 3
#Load data
path = "mlo_data/"
daily_c13iso = read.csv(paste(path, "daily_flask_c13_mlo.csv", sep=""))
monthly_c13iso = read.csv(paste(path, "monthly_flask_c13_mlo.csv", sep=""))
daily_o18iso = read.csv(paste(path, "daily_flask_o18_mlo.csv", sep=""))
intermittent_c13iso = read.csv(paste(path, "intermittent_flask_c14_mlo.csv", sep=""))
monthly_o18iso = read.csv(paste(path, "monthly_flask_o18_mlo.csv", sep=""))
daily_flask = read.csv(paste(path, "daily_flask_co2_mlo.csv", sep=""))
monthly_flask = read.csv(paste(path, "monthly_flask_co2_mlo.csv", sep=""), na.strings=-99.99)
ten_min_insitu = read.csv(paste(path, "ten_minute_in_situ_co2_mlo.txt", sep=""))
daily_insitu = read.csv(paste(path, "daily_in_situ_co2_mlo.csv", sep=""), comment.char = '%')
weekly_insitu = read.csv(paste(path, "weekly_in_situ_co2_mlo.csv", sep=""))
monthly_insitu = read.csv(paste(path, "monthly_in_situ_co2_mlo.csv", sep=""))
ten_min_insitu
#Prep data
#fixes headers
names(monthly_flask) = c( "Yr", "Mn", "Date1", "Date2", "CO2","seasonally", "fit",  "seasonally2", "CO2_filled", "seasonally3")
monthly_flask
#Splitting into two dataframes so that we can delete the NA rows in the non-filled-in data
monthly_flask1 = monthly_flask
monthly_flask1[9:10] = list(NULL)
monthly_flask2 = monthly_flask
monthly_flask2[5:8] = list(NULL)
monthly_flask2
na.omit(monthly_flask1)
# Chunk 4
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(data.frame(monthly_flask1$Date2, monthly_flask1$CO2), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled)
ts = ts[-1]
acf(ts, length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Definitely not stationary, apply differencing. Since the relationship looks linear we apply a linear filter
plot(diff(ts), type='o', main='first difference')
acf(diff(ts), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Nope, we should apply two times differncing
plot(diff(diff(ts)), type='o', main='Second difference')
acf(diff(diff(ts)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## Seems better, but still is some acf frome earlier months, following the
## Sarima way of thinking we can difference some more until it get better
plot(diff(diff(ts, 12),2), type='o', main='Second difference')
acf(diff(diff(ts, 12),1), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## The autocorrlation now seems ok, we will not make our model to complex, so we ## decide on using the selected values.
# Chunk 5
ts.transformed <- diff(diff(ts, 12),2)
plot(ts.transformed, type = 'o')
# Chunk 6
sarima(ts, p=1, d=1, q=1, P=1, Q=1, D=1, S=12)
mod <- sarima(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12)
mod
mod
plot(mod)
mod
mod <- sarima(ts, p=4, d=1, q=1, P=3, Q=1, D=1, S=12)
mod
mod
mod <- sarima(ts, p=4, d=1, q=1, P=1, Q=1, D=1, S=12)
mod
mod
ts
sarima(ts, p=4, d=1, q=1, P=1, Q=1, D=1, S=12)
mod <- sarima(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12)
regr = ar.ols(mod, order=2, demean=FALSE, intercept=TRUE)
fore = predict(mod, n.ahead=24)
fore = predict(mod, n.ahead=24)
mod
sarima.for(mod, n.ahead = 10)
sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 10)
sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
forecast <- sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
forecast
forecast$se
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(data.frame(monthly_flask1$Date2, monthly_flask1$CO2), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
# Forecasting two years into the future
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(forecast)
forecast
forecast <- sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
# Forecasting two years into the future
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
forecast$pred
plot(forecast$pred)
# Forecasting two years into the future
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
plot.ts(monthly_flask2$CO2_filled, type='s')
plot(forecast$pred)
plot.ts(monthly_flask2$CO2_filled, type='s')
forecast <- sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
plot(forecast$pred)
plot.ts(monthly_flask2$CO2_filled, type='s')
plot(forecast$pred)
# Forecasting two years into the future
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
forecast <- sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
plot.ts(monthly_flask2$CO2_filled, type='s')
plot(forecast$pred)
plot.ts(monthly_flask2$CO2_filled, type='s')
decompose(ts)
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled, frequency = 12)
ts = ts[-1]
decompose(ts)
ts
plot(ts)
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled, frequency = 12)
plot.ts(monthly_flask2$CO2_filled, type='s')
plot.ts(ts)
plot(ts)
ts
decompose(ts)
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled, frequency = 12)
decompose(ts)
acf(ts, length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled)
ts = ts[-1]
decompose(ts)
View(monthly_flask2)
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled,start = c(1960, 2), frequency = 12)
ts = ts[-1]
decompose(ts)
plot(ts)
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled,start = c(1960, 2), frequency = 12)
#Averaging the montly reads so that we have one read per month
ts = ts(monthly_flask2$CO2_filled,start = c(1960, 2), frequency = 12)
ts = ts[-1]
ts
decompose(ts)
monthly_flask2$CO2_filled
length(monthly_flask2$CO2_filled)
719+1
/12
720/12
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(data.frame(monthly_flask1$Date2, monthly_flask1$CO2), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
#Averaging the montly reads so that we have one read per month
ts = ts(monthly_flask2$CO2_filled,start = c(1960, 2), frequency = 12)
ts
#Averaging the montly reads so that we have one read per month
ts = ts(monthly_flask2$CO2_filled[-1],start = c(1960, 2), frequency = 12)
ts
plot(ts)
decompose(ts)
plot(decompose(ts))
acf(ts, length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
plot(diff(ts), type='o', main='first difference')
acf(diff(ts), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
plot(diff(diff(ts)), type='o', main='Second difference')
acf(diff(diff(ts)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## Seems better, but still is some acf frome earlier months, following the
## Sarima way of thinking we can difference some more until it get better
plot(diff(diff(ts, 12),2), type='o', main='Second difference')
acf(diff(diff(ts, 12),1), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## The autocorrlation now seems ok, we will not make our model to complex, so we ## decide on using the selected values.
```
Now plotting the transformed data we get:
```{r}
ts.transformed <- diff(diff(ts, 12),2)
plot(ts.transformed, type = 'o')
```
Which seems like a stationary process.
plot(ts.transformed, type = 'o')
plot(ts.transformed, type = 'o')
ts.transformed <- diff(diff(ts, 12),2)
plot(diff(ts), type='o', main='first difference')
acf(diff(ts), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
plot(diff(diff(ts)), type='o', main='Second difference')
acf(diff(diff(ts)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## Seems better, but still is some acf frome earlier months, following the
## Sarima way of thinking we can difference some more until it get better
plot(diff(diff(ts, 12),2), type='o', main='Second difference')
acf(diff(diff(ts, 12),1), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
ts.transformed <- diff(diff(ts, 12),2)
plot(ts.transformed, type = 'o')
sarima(ts, p=1, d=1, q=1, P=1, Q=1, D=1, S=12)
mod <- sarima(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12)
# Forecasting two years into the future
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
forecast <- sarima.for(ts, p=4, d=1, q=1, P=4, Q=1, D=1, S=12, n.ahead = 24)
plot.ts(monthly_flask2$CO2_filled, type='s')
plot(forecast$pred)
mod
install.packages("eponym")
install.packages("installr")
library(installr)
updateR()
library(epnym)
install.packages("epnym")
