# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
#Load data
path = "mlo_data/"
daily_c13iso = read.csv(paste(path, "daily_flask_c13_mlo.csv", sep=""))
# Chunk 1: setup
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE,
include = FALSE,
results = "hold"
)
knitr::opts_chunk$set(error=TRUE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(results="hold")
#Imports
library("knitr") #probably already installed
library("rmarkdown") #probably already installed
library(astsa)
#Load data
path = "mlo_data/"
daily_c13iso = read.csv(paste(path, "daily_flask_c13_mlo.csv", sep=""))
monthly_c13iso = read.csv(paste(path, "monthly_flask_c13_mlo.csv", sep=""))
daily_o18iso = read.csv(paste(path, "daily_flask_o18_mlo.csv", sep=""))
intermittent_c13iso = read.csv(paste(path, "intermittent_flask_c14_mlo.csv", sep=""))
monthly_o18iso = read.csv(paste(path, "monthly_flask_o18_mlo.csv", sep=""))
daily_flask = read.csv(paste(path, "daily_flask_co2_mlo.csv", sep=""))
monthly_flask = read.csv(paste(path, "monthly_flask_co2_mlo.csv", sep=""), na.strings=-99.99)
ten_min_insitu = read.csv(paste(path, "ten_minute_in_situ_co2_mlo.txt", sep=""))
daily_insitu = read.csv(paste(path, "daily_in_situ_co2_mlo.csv", sep=""), comment.char = '%')
weekly_insitu = read.csv(paste(path, "weekly_in_situ_co2_mlo.csv", sep=""))
monthly_insitu = read.csv(paste(path, "monthly_in_situ_co2_mlo.csv", sep=""))
ten_min_insitu
#Prep data
#fixes headers
names(monthly_flask) = c( "Yr", "Mn", "Date1", "Date2", "CO2","seasonally", "fit",  "seasonally2", "CO2_filled", "seasonally3")
monthly_flask
#Splitting into two dataframes so that we can delete the NA rows in the non-filled-in data
monthly_flask1 = monthly_flask
monthly_flask1[9:10] = list(NULL)
monthly_flask2 = monthly_flask
monthly_flask2[5:8] = list(NULL)
monthly_flask2
na.omit(monthly_flask1)
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(data.frame(monthly_flask1$Date2, monthly_flask1$CO2), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled)
ts = ts[-1]
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled, deltat=1/12)
ts = ts[-1]
acf(ts, length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Definitely not stationary, apply differencing. Since the relationship looks linear we apply a linear filter
plot(diff(ts), type='o', main='first difference')
acf(diff(ts), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
plot(diff(diff(ts)), type='o', main='Second difference')
acf(diff(diff(ts)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
#Definitely not stationary, apply differencing. Since the relationship looks linear we apply a linear filter
plot(diff(ts, 12), type='o', main='first difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
plot(diff(diff(ts)), type='o', main='Second difference')
plot(diff(diff(ts, 12)), type='o', main='Second difference')
acf(diff(diff(ts, 12)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
ts.transformed <- diff(diff(ts, 12),2)
plot(ts.transformed, type = 'o')
# Chunk 1: setup
knitr::opts_chunk$set(
error = FALSE,
message = FALSE,
warning = FALSE,
include = FALSE,
results = "hold"
)
knitr::opts_chunk$set(error=TRUE)
knitr::opts_chunk$set(warning=FALSE)
knitr::opts_chunk$set(message=FALSE)
knitr::opts_chunk$set(results="hold")
# Chunk 2
#Imports
library("knitr") #probably already installed
library("rmarkdown") #probably already installed
library(astsa)
# Chunk 3
#Load data
path = "mlo_data/"
daily_c13iso = read.csv(paste(path, "daily_flask_c13_mlo.csv", sep=""))
monthly_c13iso = read.csv(paste(path, "monthly_flask_c13_mlo.csv", sep=""))
daily_o18iso = read.csv(paste(path, "daily_flask_o18_mlo.csv", sep=""))
intermittent_c13iso = read.csv(paste(path, "intermittent_flask_c14_mlo.csv", sep=""))
monthly_o18iso = read.csv(paste(path, "monthly_flask_o18_mlo.csv", sep=""))
daily_flask = read.csv(paste(path, "daily_flask_co2_mlo.csv", sep=""))
monthly_flask = read.csv(paste(path, "monthly_flask_co2_mlo.csv", sep=""), na.strings=-99.99)
ten_min_insitu = read.csv(paste(path, "ten_minute_in_situ_co2_mlo.txt", sep=""))
daily_insitu = read.csv(paste(path, "daily_in_situ_co2_mlo.csv", sep=""), comment.char = '%')
weekly_insitu = read.csv(paste(path, "weekly_in_situ_co2_mlo.csv", sep=""))
monthly_insitu = read.csv(paste(path, "monthly_in_situ_co2_mlo.csv", sep=""))
#fixes headers
names(monthly_flask) = c( "Yr", "Mn", "Date1", "Date2", "CO2","seasonally", "fit",  "seasonally2", "CO2_filled", "seasonally3")
monthly_flask
#Splitting into two dataframes so that we can delete the NA rows in the non-filled-in data
monthly_flask1 = monthly_flask
monthly_flask1[9:10] = list(NULL)
monthly_flask2 = monthly_flask
monthly_flask2[5:8] = list(NULL)
monthly_flask2
na.omit(monthly_flask1)
# Chunk 4
#Creating basic plots
plot(data.frame(monthly_flask2$Date2, monthly_flask2$CO2_filled), type="o", ylab="CO2 Levels")
plot(data.frame(monthly_flask1$Date2, monthly_flask1$CO2), type="o", ylab="CO2 Levels")
plot.ts(monthly_flask2$CO2_filled, type='s')
#Averaging the montly reads so that we have one read per month
ts = as.ts(monthly_flask2$CO2_filled, deltat=1/12)
ts = ts[-1]
acf(ts, length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Definitely not stationary, apply differencing. Since the relationship looks linear we apply a linear filter
plot(diff(ts, 12), type='o', main='first difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
#Nope, we should apply two times differncing
plot(diff(diff(ts, 12)), type='o', main='Second difference')
acf(diff(diff(ts, 12)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
# Seems to be some regular trends, after a few months there are tops in the acf. # maybe there is some seasonal variance repeating each 12 months
plot(diff(ts, 12), type='o', main='Second difference')
acf(diff(ts, 12), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## Seems better, but still is some acf frome earlier months, following the
## Sarima way of thinking we can difference some more until it get better
plot(diff(diff(ts, 12),2), type='o', main='Second difference')
acf(diff(diff(ts, 12),1), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
## The autocorrlation now seems ok, we will not make our model to complex, so we ## decide on using the selected values.
# Chunk 5
ts.transformed <- diff(diff(ts, 12),2)
plot(ts.transformed, type = 'o')
# Chunk 6
sarima(ts, p=1, d=1, q=1, P=1, Q=1, D=1, S=12)
#test
# Chunk 7
minVal.AIC <- c(10000,1,1,1,1)
minVal.AICC <- c(10000,1,1,1,1)
minVal.BIC <- c(10000,1,1,1,1)
errorAt <- c()
for(p1 in 4:5){
for(q1 in 1:5){
for(P1 in 1:5){
for(Q1 in 1:5){
mod <- tryCatch(sarima(ts, p=p1, d=1, q=q1, P=P1, D=1, S=12, Q = Q1, no.constant = T, tol = 1e-3),
error = function(e) "ERROR")
if(mod == "ERROR"){
errorAt <- append(errorAt, c(p1, q1, P1, Q1))
next
}
if(mod$AIC < minVal.AIC[1]){
minVal.AIC <- c(mod$AIC, p1, q1, P1, Q1)
}
if(mod$AICc < minVal.AICC[1]){
minVal.AICC <- c(mod$AICc, p1, q1, P1, Q1)
}
if(mod$BIC < minVal.BIC[1]){
minVal.BIC <- c(mod$BIC, p1, q1, P1, Q1)
}
}
}
}
}
# 4 1 5 1 seems to be best with 1.27 AIC and 1.27 AICC
mod <- sarima(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12)
mod
mod <- sarima(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12)
mod
#Confidence intervals
'?'(sarima)
pacf(diff(diff(ts, 12),1)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
pacf(diff(diff(ts, 12),1)), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading'))
pacf(diff(diff(ts, 12),1)), length(monthly_flask2$CO2_filled))
pacf(diff(diff(ts, 12),1), length(monthly_flask2$CO2_filled), main='Monthly CO2 flask reading')
mod
mod <- sarima(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12)
mod
mod[1]
mod$ttable
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
estimates = cbind(mod$ttable$Estimate, mod$ttable$SE)
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
mod$ttable$Estimate
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
mod$ttable[1]
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
mod$ttable[2]
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
mod$ttable[1,1]
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
mod$ttable[1,2]
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
ci = c()
for(i in 1:11){
upper = mod$ttable[i, 1] + mod$ttable[i, 1]/1.96*mod$ttable[i, 2]
lower = mod$ttable[i, 1] - mod$ttable[i, 1]/1.96*mod$ttable[i, 2]
ci = c(ci, (lower, upper))
}
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
ci = c()
for(i in 1:11){
upper = mod$ttable[i, 1] + mod$ttable[i, 1]/1.96*mod$ttable[i, 2]
lower = mod$ttable[i, 1] - mod$ttable[i, 1]/1.96*mod$ttable[i, 2]
ci = rbind(ci, c(mod$ttable[i, 1], lower, upper))
}
ci = as.data.frame(ci)
names(ci) = c("Estimate", "Lower bound", "Upper bound")
ci
#Confidence intervals
#Since we have a large sample size we can use a normal approximation to calculate the confidence intervals to be the estimate plus/minus
# their estimate/1.96*their standard deviation
ci = c()
for(i in 1:11){
upper = mod$ttable[i, 1] + 1.96*mod$ttable[i, 2]
lower = mod$ttable[i, 1] - 1.96*mod$ttable[i, 2]
ci = rbind(ci, c(mod$ttable[i, 1], lower, upper))
}
ci = as.data.frame(ci)
names(ci) = c("Estimate", "Lower bound", "Upper bound")
ci
#Predictions
mod
#Predictions
pred = predict(mod, n.ahead=100)
#Predictions
pred = predict(mod, 10)
#Predictions
pred = predict(sarima(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12), 10)
#Predictions
pred = predict(sarima.sim(ts, p=4, d=1, q=1, P=5, Q=1, D=1, S=12), n.ahead=100)
?predict.Arima
#Predictions
pred = predict(mod, n.ahead=100)
?predict.Sarima
?predict.sarima
?sarima
?predict.sarima
?predict.Aarima
?predict.Arima
#Predictions
pred = predict(mod, n.ahead=100)
#Predictions
pred = predict(mod$fit, n.ahead=100)
pred
pred
#Predictions
fore = predict(mod$fit, n.ahead=100)
#Predictions
fore = predict(mod$fit, n.ahead=100)
ts.plot(ts, fore$pred, col=1:2, ylab="Monthly CO2")
ts.plot(ts, fore$pred, ylab="Monthly CO2")
#Predictions
fore = predict(mod$fit, n.ahead=100)
ts.plot(ts, fore$pred, col=1:2, ylab="Recruitment")
U = fore$pred+fore$se; L = fore$pred-fore$se
xx = c(time(U), rev(time(U))); yy = c(L, rev(U))
polygon(xx, yy, border = 8, col = gray(.6, alpha =. 2))
lines(fore$pred, type="p", col=2)
plot(ts, fore$pred, col=1:2, ylab="Recruitment")
plot(ts, fore$pred, col=1:2, ylab="Recruitment")
